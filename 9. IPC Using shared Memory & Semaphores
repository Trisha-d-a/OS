#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define SHM_SIZE 1024

int main() {
    key_t key = 1234; 
    int shmid;
    char *shm_ptr;

    shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    shm_ptr = shmat(shmid, NULL, 0);
    if (shm_ptr == (char *) -1) {
        perror("shmat failed");
        exit(1);
    }

    pid_t pid = fork();  // Create a child process

    if (pid == 0) {  // Child process: Write to shared memory
       
        printf("Child: Writing to shared memory...\n");
        char message[] = "Hello from the child process!";
        strcpy(shm_ptr, message);  // Write message to shared memory
        printf("Child: Message written: %s\n", message);
        exit(0);  // Child process exits after writing
    } else if (pid > 0) {  
        wait(NULL);

        printf("Parent: Reading from shared memory...\n");
        printf("Parent: Message read: %s\n", shm_ptr);

        shmdt(shm_ptr);

        shmctl(shmid, IPC_RMID, NULL);
        printf("Parent: Shared memory segment deleted.\n");
    } else {  // Fork failed
        perror("fork failed");
        exit(1);
    }

    return 0;
}
