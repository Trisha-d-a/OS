#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000
#define NUM_BLOCKS 10

typedef struct { int size, start, allocated; } Block;
Block memory[NUM_BLOCKS];

void initializeMemory() {
    for (int i = 0; i < NUM_BLOCKS; i++) {
        memory[i] = (Block){MEMORY_SIZE / NUM_BLOCKS, i * (MEMORY_SIZE / NUM_BLOCKS), 0};
    }
}

void allocate(int request_size, int strategy) {
    int bestIndex = -1, worstIndex = -1, minDiff = MEMORY_SIZE + 1, maxSize = -1;
    for (int i = 0; i < NUM_BLOCKS; i++) {
        if (!memory[i].allocated && memory[i].size >= request_size) {
            if (strategy == 1) { // First-fit
                memory[i].allocated = 1; printf("Allocated at block %d\n", i); return;
            }
            if (strategy == 2 && memory[i].size - request_size < minDiff) { // Best-fit
                minDiff = memory[i].size - request_size; bestIndex = i;
            }
            if (strategy == 3 && memory[i].size > maxSize) { // Worst-fit
                maxSize = memory[i].size; worstIndex = i;
            }
        }
    }
    if (strategy == 2 && bestIndex != -1) memory[bestIndex].allocated = 1;
    else if (strategy == 3 && worstIndex != -1) memory[worstIndex].allocated = 1;
    else printf("No space for %d units\n", request_size);
}

void nextFit(int request_size) {
    static int lastAllocatedIndex = 0;
    for (int i = lastAllocatedIndex; i < NUM_BLOCKS; i++) {
        if (!memory[i].allocated && memory[i].size >= request_size) {
            memory[i].allocated = 1; lastAllocatedIndex = i + 1; printf("Allocated at block %d\n", i); return;
        }
    }
    for (int i = 0; i < lastAllocatedIndex; i++) {
        if (!memory[i].allocated && memory[i].size >= request_size) {
            memory[i].allocated = 1; lastAllocatedIndex = i + 1; printf("Allocated at block %d\n", i); return;
        }
    }
    printf("No space for %d units\n", request_size);
}

void deallocate(int blockIndex) {
    if (blockIndex >= 0 && blockIndex < NUM_BLOCKS && memory[blockIndex].allocated) {
        memory[blockIndex].allocated = 0; printf("Deallocated at block %d\n", blockIndex);
    } else {
        printf("Block %d is already free\n", blockIndex);
    }
}

void displayMemory() {
    for (int i = 0; i < NUM_BLOCKS; i++) {
        printf("Block %d: Allocated = %s\n", i, memory[i].allocated ? "Yes" : "No");
    }
}

int main() {
    int choice, request_size, blockIndex;
    initializeMemory();

    while (1) {
        printf("\n1. First-Fit\n2. Best-Fit\n3. Worst-Fit\n4. Next-Fit\n5. Deallocate\n6. Display\n7. Exit\nChoice: ");
        scanf("%d", &choice);
        if (choice == 7) break;

        printf("Enter request size: ");
        scanf("%d", &request_size);
        if (choice == 1) allocate(request_size, 1);
        else if (choice == 2) allocate(request_size, 2);
        else if (choice == 3) allocate(request_size, 3);
        else if (choice == 4) nextFit(request_size);
        else if (choice == 5) {
            printf("Enter block to deallocate: ");
            scanf("%d", &blockIndex);
            deallocate(blockIndex);
        } else if (choice == 6) displayMemory();
    }

    return 0;
}
