#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int main() {
    int processes, resources;
    printf("Enter number of processes: ");
    scanf("%d", &processes);
    printf("Enter number of resources: ");
    scanf("%d", &resources);

    int allocation[MAX_PROCESSES][MAX_RESOURCES], max[MAX_PROCESSES][MAX_RESOURCES], need[MAX_PROCESSES][MAX_RESOURCES];
    int available[MAX_RESOURCES], work[MAX_RESOURCES], finish[MAX_PROCESSES] = {0}, safeSequence[MAX_PROCESSES];
    int count = 0;

    // Input matrices and available resources
    printf("Enter allocation matrix:\n");
    for (int i = 0; i < processes; i++)
        for (int j = 0; j < resources; j++)
            scanf("%d", &allocation[i][j]);

    printf("Enter maximum matrix:\n");
    for (int i = 0; i < processes; i++)
        for (int j = 0; j < resources; j++)
            scanf("%d", &max[i][j]);

    printf("Enter available resources vector:\n");
    for (int i = 0; i < resources; i++)
        scanf("%d", &available[i]);

    // Calculate need matrix
    for (int i = 0; i < processes; i++)
        for (int j = 0; j < resources; j++)
            need[i][j] = max[i][j] - allocation[i][j];

    // Initialize work with available resources
    for (int i = 0; i < resources; i++)
        work[i] = available[i];

    // Banker's algorithm to check safe state
    while (count < processes) {
        bool found = false;
        for (int p = 0; p < processes; p++) {
            if (!finish[p]) {
                bool canProceed = true;
                for (int r = 0; r < resources; r++) {
                    if (need[p][r] > work[r]) {
                        canProceed = false;
                        break;
                    }
                }
                if (canProceed) {
                    for (int r = 0; r < resources; r++)
                        work[r] += allocation[p][r];
                    finish[p] = 1;
                    safeSequence[count++] = p;
                    found = true;
                    break;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return 0;
        }
    }

    // Output safe sequence
    printf("Safe sequence: ");
    for (int i = 0; i < processes; i++)
        printf("P%d ", safeSequence[i]);
    printf("\nSystem is in a safe state.\n");

    return 0;
}
