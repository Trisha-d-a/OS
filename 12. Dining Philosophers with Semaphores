#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <semaphore.h>
#include <sys/wait.h>

#define NUM_PHILOSOPHERS 5

// Semaphores to represent forks
sem_t forks[NUM_PHILOSOPHERS]; 

void philosopher(int id) {
    while (1) {
        // Thinking
        printf("Philosopher %d is thinking.\n", id);
        usleep(rand() % 1000); // Thinking time

        // Pick up left fork
        sem_wait(&forks[id]);
        printf("Philosopher %d picked up left fork.\n", id);

        // Pick up right fork
        sem_wait(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d picked up right fork.\n", id);

        // Eating
        printf("Philosopher %d is eating.\n", id);
        usleep(rand() % 1000); // Eating time

        // Put down right fork
        sem_post(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d put down right fork.\n", id);

        // Put down left fork
        sem_post(&forks[id]);
        printf("Philosopher %d put down left fork.\n", id);
    }
}

int main() {
    pid_t pids[NUM_PHILOSOPHERS];

    // Initialize semaphores to 1 (each fork is initially available)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);
    }

    // Create philosophers (processes)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pids[i] = fork();

        if (pids[i] == 0) {
            philosopher(i);  // Child process executes the philosopher function
            exit(0); // Exit the child process after execution
        }
        else if (pids[i] < 0) {
            perror("Fork failed");
            exit(1);
        }
    }

    // Parent process waits for all child processes to finish (in reality, they run infinitely)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        wait(NULL);
    }

    // Clean up semaphores
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
