#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, write_lock;
int read_count = 0;

void* reader(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) sem_wait(&write_lock);
        sem_post(&mutex);

        printf("Reader %d is reading\n", id);
        sleep(1);

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) sem_post(&write_lock);
        sem_post(&mutex);
        sleep(1);
    }
    return NULL;
}

void* writer(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&write_lock);
        printf("Writer %d is writing\n", id);
        sleep(2);
        sem_post(&write_lock);
        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t r[5], w[2];
    int rid[5] = {1, 2, 3, 4, 5}, wid[2] = {1, 2};

    sem_init(&mutex, 0, 1);
    sem_init(&write_lock, 0, 1);

    for (int i = 0; i < 5; i++) pthread_create(&r[i], NULL, reader, &rid[i]);
    for (int i = 0; i < 2; i++) pthread_create(&w[i], NULL, writer, &wid[i]);

    for (int i = 0; i < 5; i++) pthread_join(r[i], NULL);
    for (int i = 0; i < 2; i++) pthread_join(w[i], NULL);

    sem_destroy(&mutex);
    sem_destroy(&write_lock);

    return 0;
}
