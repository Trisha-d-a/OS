#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5  // Size of the buffer

// Shared buffer and its pointers
int buffer[BUFFER_SIZE];
int in = 0, out = 0;  // Pointers for producer and consumer

// Semaphores
sem_t empty, full, mutex;

int main() {
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, all buffer slots are empty
    sem_init(&full, 0, 0);             // Initially, no item is available
    sem_init(&mutex, 0, 1);            // Mutex is initially available (1)

    while (1) {
        // Producer section
        int item = rand() % 100;
        printf("Produced: %d\n", item);

        // Wait for empty slot
        sem_wait(&empty);

        // Enter critical section
        sem_wait(&mutex);

        // Add item to buffer
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;

        // Exit critical section
        sem_post(&mutex);

        // Signal that item is available
        sem_post(&full);

        // Consumer section
        sem_wait(&full);

        // Enter critical section
        sem_wait(&mutex);

        // Consume item from buffer
        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        printf("Consumed: %d\n", item);

        // Exit critical section
        sem_post(&mutex);

        // Signal that a slot is empty
        sem_post(&empty);

        sleep(1);  // Simulate time taken by producer and consumer
    }

    // Destroy semaphores (never reached in this infinite loop)
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
